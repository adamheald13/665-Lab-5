Terminals which are not used

   DBLVAL
   OR
   AND
   COM
   SETADD
   SETSUB
   SETMUL
   SETDIV
   SETMOD
   SETOR
   SETAND
   SETXOR
   SETLSH
   SETRSH
   UNSIGNED
   TYPEDEF
   STRUCT
   UNION
   CONST
   STATIC
   EXTERN
   AUTO
   REGISTER
   SIZEOF
   DO
   FOR
   SWITCH
   CASE
   DEFAULT
   CONTINUE
   BREAK
   GOTO


Rules never reduced

   31 liststatement: /* empty */

   53 op3: EQ

   77 args: /* empty */

   80 expr: INTVAL


State 14 conflicts: 13 shift/reduce, 1 reduce/reduce
State 21 conflicts: 1 reduce/reduce
State 24 conflicts: 13 shift/reduce, 1 reduce/reduce
State 25 conflicts: 13 shift/reduce, 1 reduce/reduce
State 27 conflicts: 1 reduce/reduce
State 32 conflicts: 21 reduce/reduce
State 60 conflicts: 6 reduce/reduce
State 88 conflicts: 1 reduce/reduce
State 94 conflicts: 1 reduce/reduce
State 95 conflicts: 1 reduce/reduce
State 104 conflicts: 17 shift/reduce
State 105 conflicts: 6 shift/reduce
State 106 conflicts: 6 shift/reduce
State 118 conflicts: 1 shift/reduce
State 127 conflicts: 6 shift/reduce


Grammar

    0 $accept: top $end

    1 top: /* empty */
    2    | function top

    3 function: func_signature '{' func_body '}'

    4 func_signature: type ID '(' args ')'

    5 func_body: /* empty */
    6          | declar func_body
    7          | statement func_body

    8 args: /* empty */
    9     | param
   10     | param ',' args

   11 param: type ID
   12      | type MUL ID '[' ']'
   13      | type MUL ID '[' expr ']'
   14      | type ID '[' expr ']'
   15      | type ID '[' ']'
   16      | type MUL ID

   17 functioncall: ID '(' listexpr ')'

   18 statement: /* empty */
   19          | ID SET expr ';'
   20          | MUL ID SET expr ';'
   21          | ID '[' INTVAL ']' SET expr ';'
   22          | RETURN expr ';'
   23          | '{' liststatement '}'
   24          | functioncall ';'
   25          | IF '(' expr ')' statement ELSE statement
   26          | IF '(' expr ')' statement
   27          | WHILE '(' expr ')' statement

   28 declar: type ID ';'
   29       | type ID '[' INTVAL ']'
   30       | type MUL ID '[' ']'

   31 liststatement: /* empty */
   32              | statement ',' liststatement
   33              | statement

   34 listexpr: /* empty */
   35         | expr ',' listexpr
   36         | expr

   37 expr: INTVAL
   38     | STRVAL
   39     | CHARVAL
   40     | FLTVAL
   41     | expr op expr
   42     | functioncall
   43     | ID
   44     | MUL ID
   45     | ID '[' INTVAL ']'

   46 op: BITAND
   47   | BITOR
   48   | BITXOR
   49   | op2

   50 op2: EQ
   51    | NE
   52    | op3

   53 op3: EQ
   54    | NOT EQ
   55    | op4

   56 op4: LT
   57    | GT
   58    | LE
   59    | GE
   60    | op5

   61 op5: LSH
   62    | RSH
   63    | op6

   64 op6: ADD
   65    | SUB
   66    | op7

   67 op7: MUL
   68    | DIV
   69    | MOD

   70 type: VOID
   71     | CHAR
   72     | SHORT
   73     | INT
   74     | LONG
   75     | FLOAT
   76     | DOUBLE

   77 args: /* empty */
   78     | expr
   79     | expr ',' args

   80 expr: INTVAL


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 17 25 26 27
')' (41) 4 17 25 26 27
',' (44) 10 32 35 79
';' (59) 19 20 21 22 24 28
'[' (91) 12 13 14 15 21 29 30 45
']' (93) 12 13 14 15 21 29 30 45
'{' (123) 3 23
'}' (125) 3 23
error (256)
ID (258) 4 11 12 13 14 15 16 17 19 20 21 28 29 30 43 44 45
INTVAL (259) 21 29 37 45 80
FLTVAL (260) 40
DBLVAL (261)
STRVAL (262) 38
CHARVAL (263) 39
VOID (264) 70
CHAR (265) 71
SHORT (266) 72
INT (267) 73
LONG (268) 74
FLOAT (269) 75
DOUBLE (270) 76
RETURN (271) 22
IF (272) 25 26
ELSE (273) 25
WHILE (274) 27
EQ (275) 50 53 54
NE (276) 51
GE (277) 59
LE (278) 58
GT (279) 57
LT (280) 56
ADD (281) 64
SUB (282) 65
MUL (283) 12 13 16 20 30 44 67
DIV (284) 68
MOD (285) 69
OR (286)
AND (287)
BITOR (288) 47
BITAND (289) 46
BITXOR (290) 48
NOT (291) 54
COM (292)
LSH (293) 61
RSH (294) 62
SET (295) 19 20 21
SETADD (296)
SETSUB (297)
SETMUL (298)
SETDIV (299)
SETMOD (300)
SETOR (301)
SETAND (302)
SETXOR (303)
SETLSH (304)
SETRSH (305)
UNSIGNED (306)
TYPEDEF (307)
STRUCT (308)
UNION (309)
CONST (310)
STATIC (311)
EXTERN (312)
AUTO (313)
REGISTER (314)
SIZEOF (315)
DO (316)
FOR (317)
SWITCH (318)
CASE (319)
DEFAULT (320)
CONTINUE (321)
BREAK (322)
GOTO (323)


Nonterminals, with rules where they appear

$accept (77)
    on left: 0
top (78)
    on left: 1 2, on right: 0 2
function (79)
    on left: 3, on right: 2
func_signature (80)
    on left: 4, on right: 3
func_body (81)
    on left: 5 6 7, on right: 3 6 7
args (82)
    on left: 8 9 10 77 78 79, on right: 4 10 79
param (83)
    on left: 11 12 13 14 15 16, on right: 9 10
functioncall (84)
    on left: 17, on right: 24 42
statement (85)
    on left: 18 19 20 21 22 23 24 25 26 27, on right: 7 25 26 27 32
    33
declar (86)
    on left: 28 29 30, on right: 6
liststatement (87)
    on left: 31 32 33, on right: 23 32
listexpr (88)
    on left: 34 35 36, on right: 17 35
expr (89)
    on left: 37 38 39 40 41 42 43 44 45 80, on right: 13 14 19 20 21
    22 25 26 27 35 36 41 78 79
op (90)
    on left: 46 47 48 49, on right: 41
op2 (91)
    on left: 50 51 52, on right: 49
op3 (92)
    on left: 53 54 55, on right: 52
op4 (93)
    on left: 56 57 58 59 60, on right: 55
op5 (94)
    on left: 61 62 63, on right: 60
op6 (95)
    on left: 64 65 66, on right: 63
op7 (96)
    on left: 67 68 69, on right: 66
type (97)
    on left: 70 71 72 73 74 75 76, on right: 4 11 12 13 14 15 16 28
    29 30


state 0

    0 $accept: . top $end

    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7

    $default  reduce using rule 1 (top)

    top             go to state 8
    function        go to state 9
    func_signature  go to state 10
    type            go to state 11


state 1

   70 type: VOID .

    $default  reduce using rule 70 (type)


state 2

   71 type: CHAR .

    $default  reduce using rule 71 (type)


state 3

   72 type: SHORT .

    $default  reduce using rule 72 (type)


state 4

   73 type: INT .

    $default  reduce using rule 73 (type)


state 5

   74 type: LONG .

    $default  reduce using rule 74 (type)


state 6

   75 type: FLOAT .

    $default  reduce using rule 75 (type)


state 7

   76 type: DOUBLE .

    $default  reduce using rule 76 (type)


state 8

    0 $accept: top . $end

    $end  shift, and go to state 12


state 9

    2 top: function . top

    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7

    $default  reduce using rule 1 (top)

    top             go to state 13
    function        go to state 9
    func_signature  go to state 10
    type            go to state 11


state 10

    3 function: func_signature . '{' func_body '}'

    '{'  shift, and go to state 14


state 11

    4 func_signature: type . ID '(' args ')'

    ID  shift, and go to state 15


state 12

    0 $accept: top $end .

    $default  accept


state 13

    2 top: function top .

    $default  reduce using rule 2 (top)


state 14

    3 function: func_signature '{' . func_body '}'

    ID      shift, and go to state 16
    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    MUL     shift, and go to state 20
    '{'     shift, and go to state 21

    ID        [reduce using rule 18 (statement)]
    VOID      [reduce using rule 18 (statement)]
    CHAR      [reduce using rule 18 (statement)]
    SHORT     [reduce using rule 18 (statement)]
    INT       [reduce using rule 18 (statement)]
    LONG      [reduce using rule 18 (statement)]
    FLOAT     [reduce using rule 18 (statement)]
    DOUBLE    [reduce using rule 18 (statement)]
    RETURN    [reduce using rule 18 (statement)]
    IF        [reduce using rule 18 (statement)]
    WHILE     [reduce using rule 18 (statement)]
    MUL       [reduce using rule 18 (statement)]
    '{'       [reduce using rule 18 (statement)]
    '}'       reduce using rule 5 (func_body)
    '}'       [reduce using rule 18 (statement)]
    $default  reduce using rule 5 (func_body)

    func_body     go to state 22
    functioncall  go to state 23
    statement     go to state 24
    declar        go to state 25
    type          go to state 26


state 15

    4 func_signature: type ID . '(' args ')'

    '('  shift, and go to state 27


state 16

   17 functioncall: ID . '(' listexpr ')'
   19 statement: ID . SET expr ';'
   21          | ID . '[' INTVAL ']' SET expr ';'

    SET  shift, and go to state 28
    '('  shift, and go to state 29
    '['  shift, and go to state 30


state 17

   22 statement: RETURN . expr ';'

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36

    functioncall  go to state 37
    expr          go to state 38


state 18

   25 statement: IF . '(' expr ')' statement ELSE statement
   26          | IF . '(' expr ')' statement

    '('  shift, and go to state 39


state 19

   27 statement: WHILE . '(' expr ')' statement

    '('  shift, and go to state 40


state 20

   20 statement: MUL . ID SET expr ';'

    ID  shift, and go to state 41


state 21

   23 statement: '{' . liststatement '}'

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    MUL     shift, and go to state 20
    '{'     shift, and go to state 21

    '}'       reduce using rule 18 (statement)
    '}'       [reduce using rule 31 (liststatement)]
    $default  reduce using rule 18 (statement)

    functioncall   go to state 23
    statement      go to state 42
    liststatement  go to state 43


state 22

    3 function: func_signature '{' func_body . '}'

    '}'  shift, and go to state 44


state 23

   24 statement: functioncall . ';'

    ';'  shift, and go to state 45


state 24

    7 func_body: statement . func_body

    ID      shift, and go to state 16
    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    MUL     shift, and go to state 20
    '{'     shift, and go to state 21

    ID        [reduce using rule 18 (statement)]
    VOID      [reduce using rule 18 (statement)]
    CHAR      [reduce using rule 18 (statement)]
    SHORT     [reduce using rule 18 (statement)]
    INT       [reduce using rule 18 (statement)]
    LONG      [reduce using rule 18 (statement)]
    FLOAT     [reduce using rule 18 (statement)]
    DOUBLE    [reduce using rule 18 (statement)]
    RETURN    [reduce using rule 18 (statement)]
    IF        [reduce using rule 18 (statement)]
    WHILE     [reduce using rule 18 (statement)]
    MUL       [reduce using rule 18 (statement)]
    '{'       [reduce using rule 18 (statement)]
    '}'       reduce using rule 5 (func_body)
    '}'       [reduce using rule 18 (statement)]
    $default  reduce using rule 5 (func_body)

    func_body     go to state 46
    functioncall  go to state 23
    statement     go to state 24
    declar        go to state 25
    type          go to state 26


state 25

    6 func_body: declar . func_body

    ID      shift, and go to state 16
    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    MUL     shift, and go to state 20
    '{'     shift, and go to state 21

    ID        [reduce using rule 18 (statement)]
    VOID      [reduce using rule 18 (statement)]
    CHAR      [reduce using rule 18 (statement)]
    SHORT     [reduce using rule 18 (statement)]
    INT       [reduce using rule 18 (statement)]
    LONG      [reduce using rule 18 (statement)]
    FLOAT     [reduce using rule 18 (statement)]
    DOUBLE    [reduce using rule 18 (statement)]
    RETURN    [reduce using rule 18 (statement)]
    IF        [reduce using rule 18 (statement)]
    WHILE     [reduce using rule 18 (statement)]
    MUL       [reduce using rule 18 (statement)]
    '{'       [reduce using rule 18 (statement)]
    '}'       reduce using rule 5 (func_body)
    '}'       [reduce using rule 18 (statement)]
    $default  reduce using rule 5 (func_body)

    func_body     go to state 47
    functioncall  go to state 23
    statement     go to state 24
    declar        go to state 25
    type          go to state 26


state 26

   28 declar: type . ID ';'
   29       | type . ID '[' INTVAL ']'
   30       | type . MUL ID '[' ']'

    ID   shift, and go to state 48
    MUL  shift, and go to state 49


state 27

    4 func_signature: type ID '(' . args ')'

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 36

    ')'       reduce using rule 8 (args)
    ')'       [reduce using rule 77 (args)]
    $default  reduce using rule 8 (args)

    args          go to state 50
    param         go to state 51
    functioncall  go to state 37
    expr          go to state 52
    type          go to state 53


state 28

   19 statement: ID SET . expr ';'

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36

    functioncall  go to state 37
    expr          go to state 54


state 29

   17 functioncall: ID '(' . listexpr ')'

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36

    $default  reduce using rule 34 (listexpr)

    functioncall  go to state 37
    listexpr      go to state 55
    expr          go to state 56


state 30

   21 statement: ID '[' . INTVAL ']' SET expr ';'

    INTVAL  shift, and go to state 57


state 31

   17 functioncall: ID . '(' listexpr ')'
   43 expr: ID .
   45     | ID . '[' INTVAL ']'

    '('  shift, and go to state 29
    '['  shift, and go to state 58

    $default  reduce using rule 43 (expr)


state 32

   37 expr: INTVAL .
   80     | INTVAL .

    EQ        reduce using rule 37 (expr)
    EQ        [reduce using rule 80 (expr)]
    NE        reduce using rule 37 (expr)
    NE        [reduce using rule 80 (expr)]
    GE        reduce using rule 37 (expr)
    GE        [reduce using rule 80 (expr)]
    LE        reduce using rule 37 (expr)
    LE        [reduce using rule 80 (expr)]
    GT        reduce using rule 37 (expr)
    GT        [reduce using rule 80 (expr)]
    LT        reduce using rule 37 (expr)
    LT        [reduce using rule 80 (expr)]
    ADD       reduce using rule 37 (expr)
    ADD       [reduce using rule 80 (expr)]
    SUB       reduce using rule 37 (expr)
    SUB       [reduce using rule 80 (expr)]
    MUL       reduce using rule 37 (expr)
    MUL       [reduce using rule 80 (expr)]
    DIV       reduce using rule 37 (expr)
    DIV       [reduce using rule 80 (expr)]
    MOD       reduce using rule 37 (expr)
    MOD       [reduce using rule 80 (expr)]
    BITOR     reduce using rule 37 (expr)
    BITOR     [reduce using rule 80 (expr)]
    BITAND    reduce using rule 37 (expr)
    BITAND    [reduce using rule 80 (expr)]
    BITXOR    reduce using rule 37 (expr)
    BITXOR    [reduce using rule 80 (expr)]
    NOT       reduce using rule 37 (expr)
    NOT       [reduce using rule 80 (expr)]
    LSH       reduce using rule 37 (expr)
    LSH       [reduce using rule 80 (expr)]
    RSH       reduce using rule 37 (expr)
    RSH       [reduce using rule 80 (expr)]
    ')'       reduce using rule 37 (expr)
    ')'       [reduce using rule 80 (expr)]
    ','       reduce using rule 37 (expr)
    ','       [reduce using rule 80 (expr)]
    ']'       reduce using rule 37 (expr)
    ']'       [reduce using rule 80 (expr)]
    ';'       reduce using rule 37 (expr)
    ';'       [reduce using rule 80 (expr)]
    $default  reduce using rule 37 (expr)


state 33

   40 expr: FLTVAL .

    $default  reduce using rule 40 (expr)


state 34

   38 expr: STRVAL .

    $default  reduce using rule 38 (expr)


state 35

   39 expr: CHARVAL .

    $default  reduce using rule 39 (expr)


state 36

   44 expr: MUL . ID

    ID  shift, and go to state 59


state 37

   42 expr: functioncall .

    $default  reduce using rule 42 (expr)


state 38

   22 statement: RETURN expr . ';'
   41 expr: expr . op expr

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76
    ';'     shift, and go to state 77

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 39

   25 statement: IF '(' . expr ')' statement ELSE statement
   26          | IF '(' . expr ')' statement

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36

    functioncall  go to state 37
    expr          go to state 85


state 40

   27 statement: WHILE '(' . expr ')' statement

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36

    functioncall  go to state 37
    expr          go to state 86


state 41

   20 statement: MUL ID . SET expr ';'

    SET  shift, and go to state 87


state 42

   32 liststatement: statement . ',' liststatement
   33              | statement .

    ','  shift, and go to state 88

    $default  reduce using rule 33 (liststatement)


state 43

   23 statement: '{' liststatement . '}'

    '}'  shift, and go to state 89


state 44

    3 function: func_signature '{' func_body '}' .

    $default  reduce using rule 3 (function)


state 45

   24 statement: functioncall ';' .

    $default  reduce using rule 24 (statement)


state 46

    7 func_body: statement func_body .

    $default  reduce using rule 7 (func_body)


state 47

    6 func_body: declar func_body .

    $default  reduce using rule 6 (func_body)


state 48

   28 declar: type ID . ';'
   29       | type ID . '[' INTVAL ']'

    '['  shift, and go to state 90
    ';'  shift, and go to state 91


state 49

   30 declar: type MUL . ID '[' ']'

    ID  shift, and go to state 92


state 50

    4 func_signature: type ID '(' args . ')'

    ')'  shift, and go to state 93


state 51

    9 args: param .
   10     | param . ',' args

    ','  shift, and go to state 94

    $default  reduce using rule 9 (args)


state 52

   41 expr: expr . op expr
   78 args: expr .
   79     | expr . ',' args

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76
    ','     shift, and go to state 95

    $default  reduce using rule 78 (args)

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 53

   11 param: type . ID
   12      | type . MUL ID '[' ']'
   13      | type . MUL ID '[' expr ']'
   14      | type . ID '[' expr ']'
   15      | type . ID '[' ']'
   16      | type . MUL ID

    ID   shift, and go to state 96
    MUL  shift, and go to state 97


state 54

   19 statement: ID SET expr . ';'
   41 expr: expr . op expr

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76
    ';'     shift, and go to state 98

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 55

   17 functioncall: ID '(' listexpr . ')'

    ')'  shift, and go to state 99


state 56

   35 listexpr: expr . ',' listexpr
   36         | expr .
   41 expr: expr . op expr

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76
    ','     shift, and go to state 100

    $default  reduce using rule 36 (listexpr)

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 57

   21 statement: ID '[' INTVAL . ']' SET expr ';'

    ']'  shift, and go to state 101


state 58

   45 expr: ID '[' . INTVAL ']'

    INTVAL  shift, and go to state 102


state 59

   44 expr: MUL ID .

    $default  reduce using rule 44 (expr)


state 60

   50 op2: EQ .
   53 op3: EQ .

    ID        reduce using rule 50 (op2)
    ID        [reduce using rule 53 (op3)]
    INTVAL    reduce using rule 50 (op2)
    INTVAL    [reduce using rule 53 (op3)]
    FLTVAL    reduce using rule 50 (op2)
    FLTVAL    [reduce using rule 53 (op3)]
    STRVAL    reduce using rule 50 (op2)
    STRVAL    [reduce using rule 53 (op3)]
    CHARVAL   reduce using rule 50 (op2)
    CHARVAL   [reduce using rule 53 (op3)]
    MUL       reduce using rule 50 (op2)
    MUL       [reduce using rule 53 (op3)]
    $default  reduce using rule 50 (op2)


state 61

   51 op2: NE .

    $default  reduce using rule 51 (op2)


state 62

   59 op4: GE .

    $default  reduce using rule 59 (op4)


state 63

   58 op4: LE .

    $default  reduce using rule 58 (op4)


state 64

   57 op4: GT .

    $default  reduce using rule 57 (op4)


state 65

   56 op4: LT .

    $default  reduce using rule 56 (op4)


state 66

   64 op6: ADD .

    $default  reduce using rule 64 (op6)


state 67

   65 op6: SUB .

    $default  reduce using rule 65 (op6)


state 68

   67 op7: MUL .

    $default  reduce using rule 67 (op7)


state 69

   68 op7: DIV .

    $default  reduce using rule 68 (op7)


state 70

   69 op7: MOD .

    $default  reduce using rule 69 (op7)


state 71

   47 op: BITOR .

    $default  reduce using rule 47 (op)


state 72

   46 op: BITAND .

    $default  reduce using rule 46 (op)


state 73

   48 op: BITXOR .

    $default  reduce using rule 48 (op)


state 74

   54 op3: NOT . EQ

    EQ  shift, and go to state 103


state 75

   61 op5: LSH .

    $default  reduce using rule 61 (op5)


state 76

   62 op5: RSH .

    $default  reduce using rule 62 (op5)


state 77

   22 statement: RETURN expr ';' .

    $default  reduce using rule 22 (statement)


state 78

   41 expr: expr op . expr

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36

    functioncall  go to state 37
    expr          go to state 104


state 79

   49 op: op2 .

    $default  reduce using rule 49 (op)


state 80

   52 op2: op3 .

    $default  reduce using rule 52 (op2)


state 81

   55 op3: op4 .

    $default  reduce using rule 55 (op3)


state 82

   60 op4: op5 .

    $default  reduce using rule 60 (op4)


state 83

   63 op5: op6 .

    $default  reduce using rule 63 (op5)


state 84

   66 op6: op7 .

    $default  reduce using rule 66 (op6)


state 85

   25 statement: IF '(' expr . ')' statement ELSE statement
   26          | IF '(' expr . ')' statement
   41 expr: expr . op expr

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76
    ')'     shift, and go to state 105

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 86

   27 statement: WHILE '(' expr . ')' statement
   41 expr: expr . op expr

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76
    ')'     shift, and go to state 106

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 87

   20 statement: MUL ID SET . expr ';'

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36

    functioncall  go to state 37
    expr          go to state 107


state 88

   32 liststatement: statement ',' . liststatement

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    MUL     shift, and go to state 20
    '{'     shift, and go to state 21

    '}'       reduce using rule 18 (statement)
    '}'       [reduce using rule 31 (liststatement)]
    $default  reduce using rule 18 (statement)

    functioncall   go to state 23
    statement      go to state 42
    liststatement  go to state 108


state 89

   23 statement: '{' liststatement '}' .

    $default  reduce using rule 23 (statement)


state 90

   29 declar: type ID '[' . INTVAL ']'

    INTVAL  shift, and go to state 109


state 91

   28 declar: type ID ';' .

    $default  reduce using rule 28 (declar)


state 92

   30 declar: type MUL ID . '[' ']'

    '['  shift, and go to state 110


state 93

    4 func_signature: type ID '(' args ')' .

    $default  reduce using rule 4 (func_signature)


state 94

   10 args: param ',' . args

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 36

    ')'       reduce using rule 8 (args)
    ')'       [reduce using rule 77 (args)]
    $default  reduce using rule 8 (args)

    args          go to state 111
    param         go to state 51
    functioncall  go to state 37
    expr          go to state 52
    type          go to state 53


state 95

   79 args: expr ',' . args

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    VOID     shift, and go to state 1
    CHAR     shift, and go to state 2
    SHORT    shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    MUL      shift, and go to state 36

    ')'       reduce using rule 8 (args)
    ')'       [reduce using rule 77 (args)]
    $default  reduce using rule 8 (args)

    args          go to state 112
    param         go to state 51
    functioncall  go to state 37
    expr          go to state 52
    type          go to state 53


state 96

   11 param: type ID .
   14      | type ID . '[' expr ']'
   15      | type ID . '[' ']'

    '['  shift, and go to state 113

    $default  reduce using rule 11 (param)


state 97

   12 param: type MUL . ID '[' ']'
   13      | type MUL . ID '[' expr ']'
   16      | type MUL . ID

    ID  shift, and go to state 114


state 98

   19 statement: ID SET expr ';' .

    $default  reduce using rule 19 (statement)


state 99

   17 functioncall: ID '(' listexpr ')' .

    $default  reduce using rule 17 (functioncall)


state 100

   35 listexpr: expr ',' . listexpr

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36

    $default  reduce using rule 34 (listexpr)

    functioncall  go to state 37
    listexpr      go to state 115
    expr          go to state 56


state 101

   21 statement: ID '[' INTVAL ']' . SET expr ';'

    SET  shift, and go to state 116


state 102

   45 expr: ID '[' INTVAL . ']'

    ']'  shift, and go to state 117


state 103

   54 op3: NOT EQ .

    $default  reduce using rule 54 (op3)


state 104

   41 expr: expr . op expr
   41     | expr op expr .

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76

    EQ        [reduce using rule 41 (expr)]
    NE        [reduce using rule 41 (expr)]
    GE        [reduce using rule 41 (expr)]
    LE        [reduce using rule 41 (expr)]
    GT        [reduce using rule 41 (expr)]
    LT        [reduce using rule 41 (expr)]
    ADD       [reduce using rule 41 (expr)]
    SUB       [reduce using rule 41 (expr)]
    MUL       [reduce using rule 41 (expr)]
    DIV       [reduce using rule 41 (expr)]
    MOD       [reduce using rule 41 (expr)]
    BITOR     [reduce using rule 41 (expr)]
    BITAND    [reduce using rule 41 (expr)]
    BITXOR    [reduce using rule 41 (expr)]
    NOT       [reduce using rule 41 (expr)]
    LSH       [reduce using rule 41 (expr)]
    RSH       [reduce using rule 41 (expr)]
    $default  reduce using rule 41 (expr)

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 105

   25 statement: IF '(' expr ')' . statement ELSE statement
   26          | IF '(' expr ')' . statement

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    MUL     shift, and go to state 20
    '{'     shift, and go to state 21

    ID        [reduce using rule 18 (statement)]
    RETURN    [reduce using rule 18 (statement)]
    IF        [reduce using rule 18 (statement)]
    WHILE     [reduce using rule 18 (statement)]
    MUL       [reduce using rule 18 (statement)]
    '{'       [reduce using rule 18 (statement)]
    $default  reduce using rule 18 (statement)

    functioncall  go to state 23
    statement     go to state 118


state 106

   27 statement: WHILE '(' expr ')' . statement

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    MUL     shift, and go to state 20
    '{'     shift, and go to state 21

    ID        [reduce using rule 18 (statement)]
    RETURN    [reduce using rule 18 (statement)]
    IF        [reduce using rule 18 (statement)]
    WHILE     [reduce using rule 18 (statement)]
    MUL       [reduce using rule 18 (statement)]
    '{'       [reduce using rule 18 (statement)]
    $default  reduce using rule 18 (statement)

    functioncall  go to state 23
    statement     go to state 119


state 107

   20 statement: MUL ID SET expr . ';'
   41 expr: expr . op expr

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76
    ';'     shift, and go to state 120

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 108

   32 liststatement: statement ',' liststatement .

    $default  reduce using rule 32 (liststatement)


state 109

   29 declar: type ID '[' INTVAL . ']'

    ']'  shift, and go to state 121


state 110

   30 declar: type MUL ID '[' . ']'

    ']'  shift, and go to state 122


state 111

   10 args: param ',' args .

    $default  reduce using rule 10 (args)


state 112

   79 args: expr ',' args .

    $default  reduce using rule 79 (args)


state 113

   14 param: type ID '[' . expr ']'
   15      | type ID '[' . ']'

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36
    ']'      shift, and go to state 123

    functioncall  go to state 37
    expr          go to state 124


state 114

   12 param: type MUL ID . '[' ']'
   13      | type MUL ID . '[' expr ']'
   16      | type MUL ID .

    '['  shift, and go to state 125

    $default  reduce using rule 16 (param)


state 115

   35 listexpr: expr ',' listexpr .

    $default  reduce using rule 35 (listexpr)


state 116

   21 statement: ID '[' INTVAL ']' SET . expr ';'

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36

    functioncall  go to state 37
    expr          go to state 126


state 117

   45 expr: ID '[' INTVAL ']' .

    $default  reduce using rule 45 (expr)


state 118

   25 statement: IF '(' expr ')' statement . ELSE statement
   26          | IF '(' expr ')' statement .

    ELSE  shift, and go to state 127

    ELSE      [reduce using rule 26 (statement)]
    $default  reduce using rule 26 (statement)


state 119

   27 statement: WHILE '(' expr ')' statement .

    $default  reduce using rule 27 (statement)


state 120

   20 statement: MUL ID SET expr ';' .

    $default  reduce using rule 20 (statement)


state 121

   29 declar: type ID '[' INTVAL ']' .

    $default  reduce using rule 29 (declar)


state 122

   30 declar: type MUL ID '[' ']' .

    $default  reduce using rule 30 (declar)


state 123

   15 param: type ID '[' ']' .

    $default  reduce using rule 15 (param)


state 124

   14 param: type ID '[' expr . ']'
   41 expr: expr . op expr

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76
    ']'     shift, and go to state 128

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 125

   12 param: type MUL ID '[' . ']'
   13      | type MUL ID '[' . expr ']'

    ID       shift, and go to state 31
    INTVAL   shift, and go to state 32
    FLTVAL   shift, and go to state 33
    STRVAL   shift, and go to state 34
    CHARVAL  shift, and go to state 35
    MUL      shift, and go to state 36
    ']'      shift, and go to state 129

    functioncall  go to state 37
    expr          go to state 130


state 126

   21 statement: ID '[' INTVAL ']' SET expr . ';'
   41 expr: expr . op expr

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76
    ';'     shift, and go to state 131

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 127

   25 statement: IF '(' expr ')' statement ELSE . statement

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    MUL     shift, and go to state 20
    '{'     shift, and go to state 21

    ID        [reduce using rule 18 (statement)]
    RETURN    [reduce using rule 18 (statement)]
    IF        [reduce using rule 18 (statement)]
    WHILE     [reduce using rule 18 (statement)]
    MUL       [reduce using rule 18 (statement)]
    '{'       [reduce using rule 18 (statement)]
    $default  reduce using rule 18 (statement)

    functioncall  go to state 23
    statement     go to state 132


state 128

   14 param: type ID '[' expr ']' .

    $default  reduce using rule 14 (param)


state 129

   12 param: type MUL ID '[' ']' .

    $default  reduce using rule 12 (param)


state 130

   13 param: type MUL ID '[' expr . ']'
   41 expr: expr . op expr

    EQ      shift, and go to state 60
    NE      shift, and go to state 61
    GE      shift, and go to state 62
    LE      shift, and go to state 63
    GT      shift, and go to state 64
    LT      shift, and go to state 65
    ADD     shift, and go to state 66
    SUB     shift, and go to state 67
    MUL     shift, and go to state 68
    DIV     shift, and go to state 69
    MOD     shift, and go to state 70
    BITOR   shift, and go to state 71
    BITAND  shift, and go to state 72
    BITXOR  shift, and go to state 73
    NOT     shift, and go to state 74
    LSH     shift, and go to state 75
    RSH     shift, and go to state 76
    ']'     shift, and go to state 133

    op   go to state 78
    op2  go to state 79
    op3  go to state 80
    op4  go to state 81
    op5  go to state 82
    op6  go to state 83
    op7  go to state 84


state 131

   21 statement: ID '[' INTVAL ']' SET expr ';' .

    $default  reduce using rule 21 (statement)


state 132

   25 statement: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 25 (statement)


state 133

   13 param: type MUL ID '[' expr ']' .

    $default  reduce using rule 13 (param)
